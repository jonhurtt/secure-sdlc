name: "[Debug] Twistcli Scans at CI & Registry v2"

on:
  #pull_request:
  #  branches: [main]
  #push:
  #    branches: [main]  
  workflow_dispatch:

env: 
  ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
  IMAGE_TAG: debug_image_${{ github.event.repository.name }}

jobs:
  twistcli_image_scan:
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    
    name: Build and scan image
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Image and Push to ECR
        id: build_and_push_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      
      #- name: Prisma Cloud image scan
      #  id: image_scan
      #  uses: PaloAltoNetworks/prisma-cloud-scan@v1.5
      #  with:
      #    pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
      #    pcc_user: ${{ secrets.PCC_USER }}
      #    pcc_pass: ${{ secrets.PCC_PASS }}
      #    image_name: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Run Twistlock Scan
        env:
          twistcli_path: ${{ vars.TWISTCLI_PATH }}
          twistcli_bearer_token: ${{ secrets.TWISTCLI_BEARER_TOKEN }}
          pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
          pcc_user: ${{ secrets.PCC_USER }}
          pcc_pass: ${{ secrets.PCC_PASS }}
          image_name: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        run: |
          echo "start_twistcli_scan"
          echo ${PWD}
          ls -al
          echo "twistcli_path: " ${twistcli_path}
          echo "downloading twistcli"
          curl -sS --header "authorization: Bearer ${twistcli_bearer_token}" ${twistcli_path} > twistcli
          chmod a+x twistcli
          ls -al
          echo "twistcli downloaded"
          docker -v
          sh .${PWD}/twistcli images scan ${image_name}
          echo "end__twistcli_scan"