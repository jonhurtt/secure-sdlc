name: "on Push (Scan Code, Scan Image, Push Image & Apply)"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  #push:
  #  branches: [main]
  workflow_dispatch:

env:
  PRISMA_API_URL: ${{ vars.PRISMA_API_URL }}
  IMAGE_NAME: ${{ github.repository }}:${{ github.sha }}
  TF_CLOUD_ORGANIZATION: "${{ vars.TERRAFORM_CLOUD_ORG }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ vars.TERRAFORM_CLOUD_WORKSPACE }}"
  CONFIG_DIRECTORY: "./"


jobs:
  #From checkov_iac_sca_scan.yml
  checkov_iac_sca_scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    
    runs-on: ubuntu-latest
    name: "Checkov IAC and SCA Scan on Push"
    

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Run Checkov Action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: '.'
          soft_fail: true
          api-key: ${{ secrets.BC_API_KEY }}
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed. Security checks that do not pass will 'fail'.
        # An alternative is to add `continue-on-error: true` to the previous step
        # Or 'soft_fail: true' to checkov.
        if: success() || failure()
        with:
          sarif_file: results.sarif
          
#From checkov_image_scan.yml
  checkov-image-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    name: checkov-image-scan
  
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@master
    
      - name: "Build the image"
        run: docker build -t ${{ env.IMAGE_NAME }}
    
      - name: "Run Checkov action"
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          quiet: true # optional: display only failed checks
          soft_fail: true # optional: do not return an error code if there are failed checks
          log_level: DEBUG # optional: set log level. Default WARNING
          docker_image: ${{ env.IMAGE_NAME }} # define the name of the image to scan
          #dockerfile_path: ${{ format('{0}/Dockerfile', env.IMAGE_PATH) }} # path to the Dockerfile
          container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues
          api-key: ${{ secrets.BC_API_KEY }} # Bridgecrew API key stored as a GitHub secret
  
  #from push_image_to_aws_ecr.yml
  build_and_push_image:
      
      name: "Build and Push Image"
      runs-on: ubuntu-latest

      steps:
        - name: Set current date as env variable
          run: echo "DATE=$(date +'%Y%m%d_%H%M')" >> $GITHUB_ENV
    
        - name: Check out code
          uses: actions/checkout@master
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{vars.AWS_ECR_REPOSITORY}}
            IMAGE_TAG: image_${{ github.event.repository.name }}_${{ env.DATE }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  #from terraform_apply.yml
  terraform_apply:
      name: "Terraform Apply"
      runs-on: ubuntu-latest
      permissions:
        contents: read
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
          id: upload-config
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}

        - name: Create Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
          id: create-run
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.upload-config.outputs.configuration_version_id }}

        - name: Apply Run
          uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
          if: fromJSON(steps.create-run.outputs.payload).data.attributes.actions.IsConfirmable
          id: apply-run
          with:
            run: ${{ steps.create-run.outputs.run_id }}
            comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"            
